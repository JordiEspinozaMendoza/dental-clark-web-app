{"ast":null,"code":"import axios from \"axios\";\nimport { PATIENT_DELETE_FAIL, PATIENT_DELETE_REQUEST, PATIENT_DELETE_RESET, PATIENT_DELETE_SUCESS, PATIENT_DETAILS_FAIL, PATIENT_DETAILS_REQUEST, PATIENT_DETAILS_RESET, PATIENT_DETAILS_SUCESS, PATIENT_LIST_FAIL, PATIENT_LIST_REQUEST, PATIENT_LIST_RESET, PATIENT_LIST_SUCESS, PATIENT_REGISTER_FAIL, PATIENT_REGISTER_REQUEST, PATIENT_REGISTER_SUCESS, PATIENT_UPDATE_FAIL, PATIENT_UPDATE_REQUEST, PATIENT_UPDATE_RESET, PATIENT_UPDATE_SUCESS, PATIENT_REGISTER_RESET, PATIENT_SEARCH_FAIL, PATIENT_SEARCH_REQUEST, PATIENT_SEARCH_RESET, PATIENT_SEARCH_SUCESS } from \"../constants/patientConstants\";\nexport const register = (name, sex, lastName, age, phone, email) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_REGISTER_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(\"/api/patients/create/\", {\n      name: name,\n      email: email,\n      sex: sex,\n      lastName: lastName,\n      age: age,\n      phone: phone\n    }, config);\n    dispatch({\n      type: PATIENT_REGISTER_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n}; // list action\n\nexport const listPatients = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(\"/api/patients/\", config);\n    dispatch({\n      type: PATIENT_LIST_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n}; // Search action\n\nexport const searchPatients = query => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_SEARCH_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    console.log(query);\n\n    if (query == null) {\n      console.log(\"a\");\n    }\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/patients/search/${query}/`, config);\n    dispatch({\n      type: PATIENT_SEARCH_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_SEARCH_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n}; // Delete action\n\nexport const deletePatient = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.delete(`/api/patients/delete/${id}/`, config);\n    dispatch({\n      type: PATIENT_DELETE_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_DELETE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n}; // Get details action\n\nexport const getPatientDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/patients/${id}`, config);\n    dispatch({\n      type: PATIENT_DETAILS_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n}; // update by admin action\n\nexport const updatePatient = patient => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PATIENT_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/patients/update/${patient._id}/`, patient, config);\n    dispatch({\n      type: PATIENT_UPDATE_SUCESS,\n      payload: data\n    });\n    dispatch({\n      type: PATIENT_DETAILS_SUCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PATIENT_UPDATE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/dell/Documents/Proyects/Dental Clark/frontend/src/actions/patientActions.js"],"names":["axios","PATIENT_DELETE_FAIL","PATIENT_DELETE_REQUEST","PATIENT_DELETE_RESET","PATIENT_DELETE_SUCESS","PATIENT_DETAILS_FAIL","PATIENT_DETAILS_REQUEST","PATIENT_DETAILS_RESET","PATIENT_DETAILS_SUCESS","PATIENT_LIST_FAIL","PATIENT_LIST_REQUEST","PATIENT_LIST_RESET","PATIENT_LIST_SUCESS","PATIENT_REGISTER_FAIL","PATIENT_REGISTER_REQUEST","PATIENT_REGISTER_SUCESS","PATIENT_UPDATE_FAIL","PATIENT_UPDATE_REQUEST","PATIENT_UPDATE_RESET","PATIENT_UPDATE_SUCESS","PATIENT_REGISTER_RESET","PATIENT_SEARCH_FAIL","PATIENT_SEARCH_REQUEST","PATIENT_SEARCH_RESET","PATIENT_SEARCH_SUCESS","register","name","sex","lastName","age","phone","email","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","error","response","detail","message","listPatients","get","searchPatients","query","console","log","deletePatient","id","delete","getPatientDetails","updatePatient","patient","put","_id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n  PATIENT_DELETE_FAIL,\r\n  PATIENT_DELETE_REQUEST,\r\n  PATIENT_DELETE_RESET,\r\n  PATIENT_DELETE_SUCESS,\r\n  PATIENT_DETAILS_FAIL,\r\n  PATIENT_DETAILS_REQUEST,\r\n  PATIENT_DETAILS_RESET,\r\n  PATIENT_DETAILS_SUCESS,\r\n  PATIENT_LIST_FAIL,\r\n  PATIENT_LIST_REQUEST,\r\n  PATIENT_LIST_RESET,\r\n  PATIENT_LIST_SUCESS,\r\n  PATIENT_REGISTER_FAIL,\r\n  PATIENT_REGISTER_REQUEST,\r\n  PATIENT_REGISTER_SUCESS,\r\n  PATIENT_UPDATE_FAIL,\r\n  PATIENT_UPDATE_REQUEST,\r\n  PATIENT_UPDATE_RESET,\r\n  PATIENT_UPDATE_SUCESS,\r\n  PATIENT_REGISTER_RESET,\r\n  PATIENT_SEARCH_FAIL,\r\n  PATIENT_SEARCH_REQUEST,\r\n  PATIENT_SEARCH_RESET,\r\n  PATIENT_SEARCH_SUCESS,\r\n} from \"../constants/patientConstants\";\r\nexport const register = (name, sex, lastName, age, phone, email) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    dispatch({ type: PATIENT_REGISTER_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.post(\r\n      \"/api/patients/create/\",\r\n      {\r\n        name: name,\r\n        email: email,\r\n        sex: sex,\r\n        lastName: lastName,\r\n        age: age,\r\n        phone: phone,\r\n      },\r\n      config\r\n    );\r\n    dispatch({ type: PATIENT_REGISTER_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// list action\r\nexport const listPatients = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PATIENT_LIST_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(\"/api/patients/\", config);\r\n    dispatch({ type: PATIENT_LIST_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n// Search action\r\nexport const searchPatients = (query) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PATIENT_SEARCH_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    console.log(query);\r\n    if (query==null) {\r\n      console.log(\"a\")\r\n    }\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(`/api/patients/search/${query}/`, config);\r\n    dispatch({ type: PATIENT_SEARCH_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_SEARCH_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Delete action\r\nexport const deletePatient = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PATIENT_DELETE_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.delete(`/api/patients/delete/${id}/`, config);\r\n    dispatch({ type: PATIENT_DELETE_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_DELETE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// Get details action\r\nexport const getPatientDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PATIENT_DETAILS_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(`/api/patients/${id}`, config);\r\n    dispatch({ type: PATIENT_DETAILS_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// update by admin action\r\nexport const updatePatient = (patient) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: PATIENT_UPDATE_REQUEST });\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/api/patients/update/${patient._id}/`,\r\n      patient,\r\n      config\r\n    );\r\n    dispatch({ type: PATIENT_UPDATE_SUCESS, payload: data });\r\n    dispatch({ type: PATIENT_DETAILS_SUCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: PATIENT_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.detail\r\n          ? error.response.data.detail\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}